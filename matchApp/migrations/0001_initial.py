# Generated by Django 4.2.16 on 2024-11-30 14:30

import datetime
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('sportsApp', '0024_remove_goal_match_remove_goal_player_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='Match',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_address_default', models.BooleanField(default=False)),
                ('status', models.CharField(choices=[('Initiated', 'Initiated'), ('Running', 'Running'), ('Interrupted', 'Interrupted'), ('Cancelled', 'Cancelled'), ('Completed', 'Completed')], default='Initiated', max_length=20)),
                ('match_date', models.DateField()),
                ('match_time', models.TimeField(blank=True, null=True)),
                ('place', models.CharField(blank=True, max_length=255, null=True)),
                ('match_complete', models.BooleanField(default=False)),
                ('notes', models.TextField(blank=True, null=True)),
                ('schedule', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('event', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='matches', to='sportsApp.event')),
                ('team1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='match_team1', to='sportsApp.eventteam')),
                ('team2', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='match_team2', to='sportsApp.eventteam')),
            ],
        ),
        migrations.CreateModel(
            name='Substitution',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_emergency_substitution', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('match', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='matchApp.match')),
                ('new_player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='new_player_substitutions', to='sportsApp.player')),
                ('previous_player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='previous_player_substitutions', to='sportsApp.player')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sportsApp.team')),
            ],
        ),
        migrations.CreateModel(
            name='Refree',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('position', models.CharField(choices=[('LEFT_TOUCH_LINE', 'Left Touch Line'), ('RIGHT_TOUCH_LINE', 'Right Touch Line'), ('MAIN', 'Main'), ('OUTSIDE', 'Outside')], max_length=100)),
                ('age', models.PositiveIntegerField()),
                ('phone', models.CharField(max_length=10)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('image', models.ImageField(blank=True, null=True, upload_to='images/refree/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('event', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='sportsApp.event')),
                ('match', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='matchApp.match')),
            ],
        ),
        migrations.CreateModel(
            name='PlayerMatchEvents',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status_type', models.CharField(choices=[('FREEKICK', 'FreeKick'), ('CORNER', 'Corner'), ('PENALTY', 'Penalty'), ('OFFSIDE', 'Offside'), ('INJURY', 'Injury')], max_length=50)),
                ('time', models.TimeField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('match', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='matchApp.match')),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sportsApp.player')),
            ],
        ),
        migrations.CreateModel(
            name='MatchTimeManager',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_time', models.DateTimeField(blank=True, help_text='The time the match started.', null=True)),
                ('paused_time', models.DurationField(default=datetime.timedelta(0), help_text='The total duration the match was paused.')),
                ('resumed_time', models.DateTimeField(blank=True, help_text='The time the match resumed after a pause.', null=True)),
                ('half_time_interval', models.DurationField(default=datetime.timedelta(seconds=900), help_text='The interval duration at halftime.')),
                ('extra_time', models.DurationField(default=datetime.timedelta(0), help_text='Additional time added to the match.')),
                ('full_time_duration', models.DurationField(default=datetime.timedelta(seconds=5400), help_text='Regular full-time duration of the match.')),
                ('total_elapsed_time', models.DurationField(default=datetime.timedelta(0), help_text='Total elapsed time of the match.')),
                ('match', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='time_manager', to='matchApp.match')),
            ],
        ),
        migrations.CreateModel(
            name='MatchInterruption',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('interrupted_date', models.DateTimeField()),
                ('cause', models.CharField(choices=[('weather', 'Weather Conditions'), ('injury', 'Player Injury'), ('equipment', 'Equipment Failure'), ('crowd', 'Crowd Disturbance'), ('technical', 'Technical Issue'), ('other', 'Other')], max_length=50)),
                ('duration', models.DateTimeField()),
                ('resumed_date', models.DateTimeField(blank=True, null=True)),
                ('severity', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High')], default='low', max_length=50)),
                ('notes', models.TextField(blank=True, null=True)),
                ('match', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='matchApp.match')),
            ],
        ),
        migrations.CreateModel(
            name='Guest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('designation', models.CharField(max_length=100)),
                ('is_event_guest', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('match', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='matchApp.match')),
            ],
        ),
        migrations.CreateModel(
            name='Goal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('goal_description', models.CharField(blank=True, max_length=255, null=True)),
                ('goal_type', models.CharField(choices=[('Open Play', 'Open Play'), ('Header', 'Header'), ('Penalty Goal', 'Penalty'), ('Free-Kick Goal', 'Free Kick'), ('Own Goal', 'Own Goal'), ('Volley', 'Volley'), ('Tap-In', 'Tap In'), ('Long-Range Goal', 'Long Range'), ('Chip', 'Chip'), ('Bicycle Kick', 'Bicycle Kick')], default='Open Play', max_length=20)),
                ('goal_time', models.TimeField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('match', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='matchApp.match')),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='goals', to='sportsApp.player')),
            ],
        ),
        migrations.CreateModel(
            name='Fall',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fall_category', models.CharField(choices=[('NORMAL_FALL', 'Normal Fall'), ('YELLOW_CARD', 'Yellow Card'), ('RED_CARD', 'Red Card')], default='NORMAL_FALL', max_length=20)),
                ('fall_type', models.CharField(choices=[('HAND_BALL', 'Hand Ball'), ('OFFSIDE', 'Offside'), ('DANGEROUS_PLAY', 'Dangerous Play'), ('PUSHING', 'Pushing'), ('TRIPPING', 'Tripping'), ('UNSPORTING_BEHAVIOR', 'Unsporting Behavior'), ('OBSTRUCTION', 'Obstruction'), ('ILLEGAL_TACKLE', 'Illegal Tackle'), ('OTHER', 'Other')], max_length=20)),
                ('fall_description', models.CharField(blank=True, max_length=255, null=True)),
                ('fall_time', models.TimeField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('match', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='matchApp.match')),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fouls', to='sportsApp.player')),
            ],
        ),
    ]
